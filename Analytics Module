Data Analytics Module

Design Analytics module in the App. 
1. Follow the modular architecture. 
2. Collect user interactions data and app events. 
3. Able to support multiple analytics platforms (e.g: Google analytics, Firebase, Mixpanel)
4. Provide easy extensibility to add/remove analytics providers. 
5. Ensure privacy and compliance with regulations (e.g: GDPR, CCPA)

Designing an analytics module in a modular architecture for an iOS app involves breaking the feature into well-defined components that can function independently 
but work seamlessly when integrated. 
This approach ensures reusability, maintainability, and scalability. 

High-level architecture
Modular architecture ensures the "Analytics Module" is independent and can easily integrated into the app. 
The core layers of the design are, 
1. Analytics Core
2. Analytics Provider
3. Events Module 
4. Public API 

1. Analytics core 
This is the heart of the module. 
Responsible for event tracking, dispatching, and provider management.
Acts as single source of truth for the app analytics. 
Process and dispatches the events. 
Error handling and fallback mechanisms

public class AnalyticsManagr {
  public static let shared = AnalyticsManager()

  private var providers: [AnalyticsProvider] = [] 
  private init() {} 

  // Add provider dynamically 
  public func addProvider(_ provider: AnalyticsProvider) {
   providers.append(provider)
  }

  // Log events 
  public func logEvent(name: String, parameters: [String: Any]? = nil) {
    for provider in providers { 
      provider.logEvent(name: name, parameters: parameters)
    }
  }
}

2. AnalyticsProviders
Abstract platform-specific analytics SDKs (e.g., Firebase, MixPanel) 
Enables pluging in/out providers without affecting the app

Each provider implements a common protocol, allowing the core to interact with them uniformly. 
public protocol AnalyticsProvider { 
  func logEvent(name: String, parameters: [String: Any]?)
}

For example: 
Firebase 

import FirebaseAnalytics 
public class FirebaseAnalyticsProvider: AnalyticsProvider {
 public init()

public func logEvent(name: String, parameters: [String: Any]?) {
 FirebaseAnalytics.logEvent(name, parameters: parameters)
  }
}

import Mixpanel

public class MixpanelAnalyticsProvider: AnalyticsProvider {
    public init() {}

    public func logEvent(name: String, parameters: [String: Any]?) {
        Mixpanel.mainInstance().track(event: name, properties: parameters)
    }
}

3. Event Models 
Define standarised event names and parameters to maintain consistency across modules.

public enum AnalyticsEvent {
    case userSignedIn(userID: String)
    case productViewed(productID: String)

    // Standardized event conversion
    func toDictionary() -> (name: String, parameters: [String: Any]?) {
        switch self {
        case .userSignedIn(let userID):
            return ("user_signed_in", ["user_id": userID])
        case .productViewed(let productID):
            return ("product_viewed", ["product_id": productID])
        }
    }
}

let event = AnalyticsEvent.userSignedIn(userID: "12345")
let (name, parameters) = event.toDictionary()
AnalyticsManager.shared.logEvent(name: name, parameters: parameters)

4. Public APIs
	•	Exposes functions for the app modules to log events (e.g., logEvent(name:parameters:)).

Expose a lightweight, easy-to-use interface for other modules.

public struct Analytics {
    public static func logEvent(_ event: AnalyticsEvent) {
        let (name, parameters) = event.toDictionary()
        AnalyticsManager.shared.logEvent(name: name, parameters: parameters)
    }
}

5. Privacy and Compliance 
Add privacy-related mechanisms to handle user preferences. 
 - Allow users to opt-out of analytics 
 - Ensure no personlly identifiable information (PII) is logged without consent. 

public class PrivacyManager {
  public static var isAnalyticsEnabled = true 
}

public class AnalyticsManager {
    // Modified logEvent to respect privacy settings
    public func logEvent(name: String, parameters: [String: Any]? = nil) {
        guard PrivacyManager.isAnalyticsEnabled else { return }
        for provider in providers {
            provider.logEvent(name: name, parameters: parameters)
        }
    }
}

6. Integration 
App module usage

// AppDelegate or main entry point
AnalyticsManager.shared.addProvider(FirebaseAnalyticsProvider())
AnalyticsManager.shared.addProvider(MixpanelAnalyticsProvider())

// Log an event
Analytics.logEvent(.productViewed(productID: "98765"))

7. Testing Analytics 

You can create a MockAnalyticsProvider for unit testing.
public class MockAnalyticsProvider: AnalyticsProvider {
    public var loggedEvents: [(String, [String: Any]?)] = []

    public func logEvent(name: String, parameters: [String: Any]?) {
        loggedEvents.append((name, parameters))
    }
}

Usage: 
let mockProvider = MockAnalyticsProvider()
AnalyticsManager.shared.addProvider(mockProvider)

Analytics.logEvent(.userSignedIn(userID: "test_user"))
assert(mockProvider.loggedEvents.contains { $0.0 == "user_signed_in" })

8. Modular Packaging 
 - Package the Analytics module as a Swift Package(AnalyticsModule)
 - Make providers optional dependencies in the package
 - Use dependency injection to integrate the module into the main app.
9. Future enhancements 
- Add support for advanced event processing(e.g.: batching events) 
- Implement offline mode with persistent storage of events 
- Include real-time analytics dashboards or reporting. 

Diagram:
App Module -> Analytics Module -> Analytics Core -> [Firebase Analytics Provider, MixPanel Analytics Provider]


Design in Coupons App
Core Modules in Analytics 
1. DataReporter - Is a class contains list of analytics platforms (DataObservers) and responsible to reportEvent. 

reportEvent is the method - which has two parameters.
1. Event -> DataReporterEvent (Visit, Error(Enum defines list of errors in system), Action(enum defines list of actions), System(enumeration defines list of system events))
2. Source -> DataReporterSource (Such as the model/feature in the app - signIn, signUp pages etc) 

public protocol DataReporterContract {
    var observers: [DataReporterObserverContract] { get }

    func reportEvent(_ event: DataReporterEvent, source: DataReporterSource?)
}

public protocol DataReporterObserverContract {
    var requiresTrackingAuthorization: Bool { get }

    func onEvent(_ event: DataReporterEvent, source: DataReporterSource?)
}

public final class DataReporter: DataReporterContract {

 public var observers: [DataReporterObserverContract] = [FacebookDataObserver(),
                                                            AppleDataObserver()]
  observer.append(FirebaseDataObserver()) 
  observer.append(AmplitudeDataObserver()) 
  observer.append(BrazeDataObserver()) 
}

public func reportEvent(_ event: DataReporterEvent, source: DataReporterSource?) {
  observers.forEach { $0.onEvent(event, source: source) }
 }

Individual Observer/Analytics provider responsible for handling the DataReporterEvent - such as visit, action, error and system event. 

Analtics Constants -> is a file defines the set of events/constants used by the each provider. 
Firebase - has seperate enum defining the event names/screen names.


Appdelegate initiate the DataReporter class. 

Presenter (Base presenter) - creates the datareporter (delegate) object and calss the - reportEvent method to report event in the respective analytics provider.


Modular Architecture for an Analytics Module in an iOS App

Designing an Analytics module in a modular architecture helps to achieve scalability, reusability, and separation of concerns. Here’s a complete system design for an Analytics module in a modular iOS app.

1. Why Modular Architecture for Analytics?
	•	Encapsulation: Keeps analytics logic separate from the main app.
	•	Reusability: The module can be used across multiple apps.
	•	Scalability: Easy to extend with new analytics providers (e.g., Firebase, Mixpanel, Segment).
	•	Testability: The module can be unit tested independently.
	•	Maintainability: Developers can update or replace analytics providers without affecting the app.

2. High-Level Architecture

The Analytics module will consist of:
	1.	AnalyticsCore (Protocol-based abstraction layer)
	2.	Concrete Implementations (Firebase, Mixpanel, Custom API)
	3.	AnalyticsManager (Facade for unified API)
	4.	Event Model (Defines event structure)
	5.	DI (Dependency Injection) Support (To inject dependencies)

3. Modular Architecture Diagram

App Module
   ├── UI Layer (SwiftUI / UIKit)
   │   ├── LoginViewController
   │   ├── HomeViewController
   │   ├── ProfileViewController
   │
   ├── Business Logic Layer
   │   ├── UserManager
   │   ├── SessionManager
   │
   ├── Analytics Module (Separate Framework)
       ├── AnalyticsCore (Protocol-based abstraction)
       ├── AnalyticsManager (Singleton for event logging)
       ├── Providers (Firebase, Mixpanel, Custom API)
       ├── Event Model (Predefined analytics event structure)

4. Implementing the Analytics Module

Step 1: Define the Protocol (AnalyticsCore)

Create a protocol that all analytics services (Firebase, Mixpanel, etc.) will conform to.

protocol AnalyticsService {
    func logEvent(_ event: AnalyticsEvent)
    func logScreen(_ screenName: String)
}

Step 2: Define the Analytics Event Model

Instead of passing raw event names, use a structured approach.

enum AnalyticsEvent {
    case loginSuccess(userID: String)
    case buttonClicked(buttonName: String)
    case purchaseCompleted(amount: Double, currency: String)

    var name: String {
        switch self {
        case .loginSuccess: return "login_success"
        case .buttonClicked: return "button_clicked"
        case .purchaseCompleted: return "purchase_completed"
        }
    }

    var parameters: [String: Any] {
        switch self {
        case .loginSuccess(let userID):
            return ["user_id": userID]
        case .buttonClicked(let buttonName):
            return ["button_name": buttonName]
        case .purchaseCompleted(let amount, let currency):
            return ["amount": amount, "currency": currency]
        }
    }
}

Step 3: Implement Concrete Providers

Firebase Analytics Implementation

import FirebaseAnalytics

class FirebaseAnalyticsService: AnalyticsService {
    func logEvent(_ event: AnalyticsEvent) {
        Analytics.logEvent(event.name, parameters: event.parameters)
    }

    func logScreen(_ screenName: String) {
        Analytics.logEvent("screen_view", parameters: ["screen_name": screenName])
    }
}

Mixpanel Analytics Implementation

import Mixpanel

class MixpanelAnalyticsService: AnalyticsService {
    func logEvent(_ event: AnalyticsEvent) {
        Mixpanel.mainInstance().track(event.name, properties: event.parameters)
    }

    func logScreen(_ screenName: String) {
        Mixpanel.mainInstance().track("screen_view", properties: ["screen_name": screenName])
    }
}

Custom API Analytics Implementation

If you need to send analytics data to a backend API:

class CustomAPIAnalyticsService: AnalyticsService {
    func logEvent(_ event: AnalyticsEvent) {
        let url = URL(string: "https://api.example.com/analytics")!
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.httpBody = try? JSONSerialization.data(withJSONObject: event.parameters)
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        URLSession.shared.dataTask(with: request).resume()
    }

    func logScreen(_ screenName: String) {
        logEvent(.buttonClicked(buttonName: "Viewed \(screenName)"))
    }
}

Step 4: Implement AnalyticsManager as a Facade

This class acts as a singleton to expose analytics functionality in a modular way.

class AnalyticsManager {
    static let shared = AnalyticsManager()

    private var providers: [AnalyticsService] = []

    private init() {}

    func addProvider(_ provider: AnalyticsService) {
        providers.append(provider)
    }

    func logEvent(_ event: AnalyticsEvent) {
        providers.forEach { $0.logEvent(event) }
    }

    func logScreen(_ screenName: String) {
        providers.forEach { $0.logScreen(screenName) }
    }
}

Step 5: Inject Dependencies and Initialize Providers

In the AppDelegate or SwiftUI App struct, register the analytics providers.

@main
struct MyApp: App {
    init() {
        AnalyticsManager.shared.addProvider(FirebaseAnalyticsService())
        AnalyticsManager.shared.addProvider(MixpanelAnalyticsService())
        AnalyticsManager.shared.addProvider(CustomAPIAnalyticsService())
    }

    var body: some Scene {
        WindowGroup {
            ContentView()
        }
    }
}

Step 6: Logging Events from the App

In any view or controller:

AnalyticsManager.shared.logEvent(.loginSuccess(userID: "12345"))
AnalyticsManager.shared.logScreen("HomeScreen")

5. Benefits of this Modular Analytics Architecture

✅ Decoupled Analytics Providers - You can swap out Firebase or Mixpanel without modifying the app code.
✅ Unified API for Analytics Logging - Ensures all events are logged consistently.
✅ Supports Multiple Analytics Providers - Can log to Firebase, Mixpanel, and custom APIs simultaneously.
✅ Easy to Extend - Adding a new analytics provider (e.g., Amplitude) only requires a new class conforming to AnalyticsService.
✅ Dependency Injection Friendly - Allows injecting different analytics providers in unit tests.

6. Additional Enhancements

1. Using Combine for Reactive Analytics

Instead of directly logging events, use PassthroughSubject to send events reactively.

import Combine

class AnalyticsPublisher {
    static let shared = AnalyticsPublisher()
    private var eventSubject = PassthroughSubject<AnalyticsEvent, Never>()

    private init() {}

    func logEvent(_ event: AnalyticsEvent) {
        eventSubject.send(event)
    }

    func observeEvents() -> AnyPublisher<AnalyticsEvent, Never> {
        eventSubject.eraseToAnyPublisher()
    }
}

Any subscriber can now listen to events and process them asynchronously.

2. Offline Caching for Analytics Events

If the user is offline, cache analytics events using UserDefaults or CoreData and send them later.

7. Conclusion

This modular architecture for the Analytics module ensures that analytics services are scalable, reusable, testable, and maintainable. It abstracts implementation details, supports multiple providers, and allows easy extension.

Would you like additional details on offline analytics handling, performance optimizations, or testing strategies? 🚀



