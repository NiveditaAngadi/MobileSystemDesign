Design patterns are typical solutions to commonly occurring problems in software design. 

Each pattern is like a blueprint that you can customize to solve a particular design problem in your code. 

Design patterns
1. Creational Patterns 
2. Structural Pattrerns 
3. Behavioral Patterns 

1. Creational Patterns: Creational design patterns provide various object creation mechanisms, which increase flexibility 
and reuse of existing codel 

a. Factory Method - Provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be 
created. 
Provides a high-level flexibility for your code. 

Protocol ProjectorFactory {
 func createProjector() -> Projector 
 func syncedProjector(with projector: Projector) -> Projector 
}

extension ProjectorFactory {
 func syncedProjector(with projector: Projector) -> Projector {
 }
}

class WifiFactory: ProjectFactory {
 func createProjector() -> Projector {

 }
}

class BluetoothFactory: ProjectFactory {
 func createProjector() -> Projector {

 }
}
